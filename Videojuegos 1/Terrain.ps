Texture2D shaderTexture[5];
SamplerState SampleType;

cbuffer MaterialBuffer : register(b1)
{
	float4 materialColor;
};

cbuffer LightBuffer : register(b2)
{
    float4 ambientColor;
	float4 diffuseColor;
	float3 lightDirection;
	float padding;
};

struct PixelInputType
{
    float4 position : SV_POSITION;
	float2 tex : TEXCOORD0;
	float3 normal : NORMAL;
	float3 tangent : TANGENT;
	float3 binormal : BINORMAL;
	float2 tex2 : TEXCOORD1;
};

float4 PixelProgram(PixelInputType input) : SV_TARGET
{
	float4 texture1,texture2,aplha,detailMaping,bumpMap;
	float3 lightDir;
	float lightIntensity;
	float4 color;
	float4 detailBrightness;
	float4 resultColor;
	float3 bumpNormal;
	color = ambientColor;

	texture1 = shaderTexture[0].Sample(SampleType, input.tex.xy);
	texture2 = shaderTexture[1].Sample(SampleType, input.tex.xy);
	aplha = shaderTexture[2].Sample(SampleType, input.tex.xy);

	resultColor = saturate(texture1);
	resultColor = lerp (resultColor, texture2,aplha.r);
	resultColor = lerp (resultColor, texture2,aplha.g);
	resultColor = lerp (resultColor, texture2,aplha.b);

	// Sample the pixel in the bump map.
	bumpMap = shaderTexture[4].Sample(SampleType, input.tex2);

	// Expand the range of the normal value from (0, +1) to (-1, +1).
	bumpMap = (bumpMap * 2.0f) - 1.0f;

	// Calculate the normal from the data in the bump map.
	bumpNormal = input.normal + bumpMap.x * input.tangent + bumpMap.y * input.binormal;

	// Normalize the resulting bump normal.
	bumpNormal = normalize(bumpNormal);

	// Sample the pixel color from the detail map texture using the sampler at this texture coordinate location.
	detailMaping = shaderTexture[3].Sample(SampleType, input.tex2);

	// Set the brightness of the detail texture.
	detailBrightness = 2.8f;

	// Combine the ground texture and the detail texture.  Also multiply in the detail brightness.
	resultColor = resultColor * detailMaping * detailBrightness;

	// Invert the light direction for calculations.
    lightDir = -lightDirection;

    // Calculate the amount of light on this pixel.
    lightIntensity = saturate(dot(bumpNormal, lightDir));
	color = saturate(resultColor*lightIntensity);

    return color;
}
